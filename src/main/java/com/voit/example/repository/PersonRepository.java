package com.voit.example.repository;

import com.voit.example.entity.Person;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * Example repository for <code>Person</code>.
 * Extending <code>JpaRepository</code> for basic CRUD operations.
 * The actual implementation class will be generated by Spring.
 *
 * @author mark voit
 */
@Transactional(readOnly = true)
public interface PersonRepository extends JpaRepository<Person, Long> {

    /**
     * Example of auto generated query based on method naming convention.
     *
     * @param firstname
     * @param lastname
     * @param pageable
     * @return list of person
     *
     * @see http://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.special-parameters
     */
    List<Person> findByFirstnameOrLastname(String firstname, String lastname, Pageable pageable);

    /**
     * Example of custom query using @Query annotation.
     *
     * @param email
     * @return
     *
     * @see http://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.at-query
     */
    @Query("select p from Person p where p.email = ?1")
    Person findByEmailAddress(String email);

    /**
     * Example of query using @Query annotation.
     *
     * @param name
     * @param pageable
     * @return
     *
     * @see http://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.at-query
     */
    @Query(value = "select p from Person p where p.firstname = ?1 or p.lastname = ?1")
    Page<Person> findByName(String name, Pageable pageable);

    /**
     * Example of native query using @Query annotation.
     *
     * @param name
     * @return
     *
     * @see http://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.at-query
     */
    @Query(value = "select * from person where firstname = ?1 or lastname = ?1", nativeQuery = true)
    List<Person> findByName_native(String name);

    /**
     * Example of custom update statement.
     * Transactions readOnly flag is set to false.
     */
    @Modifying
    @Transactional
    @Query("delete from Person p where p.isActive = false")
    void deleteInactivePerson();
}
